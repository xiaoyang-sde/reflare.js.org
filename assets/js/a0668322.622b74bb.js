"use strict";(self.webpackChunkreflare_js_org=self.webpackChunkreflare_js_org||[]).push([[358],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8554:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],c={sidebar_position:5},s="\ud83d\udef3\ufe0f Dynamic Route Definition (Experimental)",l={unversionedId:"dynamic-routing",id:"dynamic-routing",title:"\ud83d\udef3\ufe0f Dynamic Route Definition (Experimental)",description:"Reflare could load the route definitions from Workers KV. Set the provider to kv and namespace to a Workers KV namespace (e.g. REFLARE) that binds to the current Worker. Reflare fetches the route definitions from namespace and handles each incoming request with the latest route definitions.",source:"@site/docs/dynamic-routing.md",sourceDirName:".",slug:"/dynamic-routing",permalink:"/dynamic-routing",editUrl:"https://github.com/xiaoyang-sde/booster.js.org/edit/master/docs/dynamic-routing.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Optimization",permalink:"/options/optimization"},next:{title:"\ud83c\udf0e Contributing",permalink:"/contributing"}},p=[],u={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\ufe0f-dynamic-route-definition-experimental"},"\ud83d\udef3\ufe0f Dynamic Route Definition (Experimental)"),(0,a.kt)("p",null,"Reflare could load the route definitions from Workers KV. Set the ",(0,a.kt)("inlineCode",{parentName:"p"},"provider")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"kv")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"namespace")," to a Workers KV namespace (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"REFLARE"),") that binds to the current Worker. Reflare fetches the route definitions from ",(0,a.kt)("inlineCode",{parentName:"p"},"namespace")," and handles each incoming request with the latest route definitions."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import useReflare from 'reflare';\n\ndeclare const REFLARE: KVNamespace;\n\nconst handleRequest = async (\n  request: Request,\n): Promise<Response> => {\n  const reflare = await useReflare({\n    provider: 'kv',\n    namespace: REFLARE,\n  });\n  return reflare.handle(request);\n};\n\naddEventListener('fetch', (event) => {\n  event.respondWith(handleRequest(event.request));\n});\n")),(0,a.kt)("p",null,"The route definitions should be stored as a JSON array in the ",(0,a.kt)("inlineCode",{parentName:"p"},"route-list")," key of ",(0,a.kt)("inlineCode",{parentName:"p"},"namespace"),". The KV namespace could be modified with ",(0,a.kt)("a",{parentName:"p",href:"https://developers.cloudflare.com/workers/cli-wrangler/commands#kvkey"},(0,a.kt)("inlineCode",{parentName:"a"},"wrangler"))," or ",(0,a.kt)("a",{parentName:"p",href:"https://api.cloudflare.com/#workers-kv-namespace-write-key-value-pair"},"Cloudflare API"),". The Reflare dashboard for route management is under development and will be released soon."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'wrangler kv:key put --binding=[namespace] \'route-list\' \'[{"path":"/*","upstream":{"domain":"httpbin.org","protocol":"https"}}]\'\n')))}d.isMDXComponent=!0}}]);